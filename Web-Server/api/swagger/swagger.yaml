swagger: '2.0'
info:
  description: |
    This is a classic REST API that is similar to a social network.
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: DevNetwork API
  contact:
    email: im.busari@gmail.com
  license:
    name: MIT
# host: petstore.swagger.io
# basePath: /v2
tags:
  - name: post
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io


paths:
  /posts:
    post:
      tags:
        - post
      summary: Add post on the website
      operationId: addPost
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Post object that will be added to the website. User must be Authorized in order to create new post.
          required: true
          schema:
            $ref: '#/definitions/Post'
      responses:
        201:
          description: Successfully added Post to the DB
        401:
          description: Unauthorized user cannot create new posts
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - post
      summary: Get all posts
      operationId: updatePet
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: Success

  /posts/{postId}:
    get:
      tags:
        - post
      summary: Get Post by ID
      description: Retrieve post information.
      parameters:
        - in: postId
          name: postId
          description: Need to provide postId in url address.
          required: true
          schema:
            $ref: '#/definitions/Post'
      responses:
        200:
          description: Success
          schema:
            type: object
            $ref: '#/definitions/Post'
        404:
          description: Post doesn't exist
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - post
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - name: postId
          in: query
          description: Status values that need to be considered for filter
          required: true
      responses:
        200:
          description: successful operation
        401:
          description: Unauthorized
        404:
          description: Couldn't find post.
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - post
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /posts/{postId}/comments:
    get:
      tags:
        - post
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets


  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10.0
          minimum: 1.0
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/json
        - application/xml
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1.0
          format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found

securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Comment:
    type: object
    properties:
      id:
        type: integer
        format: int64
      userId:
        $ref: '#/definitions/User'
      postId:
        $ref: '#/definitions/Post'
      content:
        type: string
      createdAt:
        type: date
      updatedAt:
        type: date
    xml:
      name: Category
  Relationship:
    type: object
    properties:
      id:
        type: integer
        format: int64
      follower_id:
        $ref: '#/definitions/User'
      followed_id:
        $ref: '#/definitions/User'
      createdAt:
        type: date
      updatedAt:
        type: date
    xml:
      name: Category
  UserBio:
    type: object
    properties:
      id:
        type: integer
        format: int64
      caption:
        type: string
      content:
        type: string
      dateOfBirth:
        type: date
      country:
        type: string
      city:
        type: string
      occupation:
        type: string
      createdAt:
        type: date
      updatedAt:
        type: date
    xml:
      name: Order
  Role:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      createdAt:
        type: date
      updatedAt:
        type: date
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
      roleId:
        $ref: '#/definitions/Role'
      bioId:
        $ref: '#/definitions/UserBio'
      createdAt:
        type: date
      updatedAt:
        type: date
    xml:
      name: User
  Post:
    type: object
    required:
      - userId
      - title
      - content
    properties:
      id:
        type: integer
        format: int64
      userId:
        $ref: '#/definitions/User'
      title:
        type: string
        example: Let's talk about cooking
      content:
        type: string
        example: Lasagna is quite good.
      createdAt:
        type: Date
      updatedAt:
        type: Date
    xml:
      name: Post
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /imBusari/social_network/1.0.0
